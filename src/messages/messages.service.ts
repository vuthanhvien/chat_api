import { Injectable } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';

export type CreateMessageDto = {
  content: string;
  type: string;
  roomId: string;
  id: string; // Optional ID, can be generated by the database
};

@Injectable()
export class MessageService {
  constructor(private readonly prisma: PrismaService) {}

  async create(dto: CreateMessageDto, senderId) {
    const r = await this.prisma.message.create({
      data: {
        id: dto.id,
        content: dto.content,
        type: dto.type,
        senderId: senderId,
        roomId: dto.roomId,
      },
    });
    console.log('Message created:', r);
    // Emit an event or perform any additional logic here if needed
    return {
      data: r,
      message: 'Message created successfully',
      status: 'success',
      code: 201,
    };
  }

  async find(roomId: string) {
    const res = await this.prisma.message.findMany({
      where: {
        roomId: roomId,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return {
      data: res,
      message: 'Messages retrieved successfully',
      status: 'success',
      code: 200,
    };
  }

  readMessage(): void {
    // this.messages = [];
  }

  deleteMessage(id: string): void {
    this.prisma.message.delete({
      where: { id },
    });
  }
  updateMessage(id: string, dto: CreateMessageDto): void {
    this.prisma.message.update({
      where: { id },
      data: {
        content: dto.content,
        type: dto.type,
      },
    });
  }
}
